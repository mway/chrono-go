// Code generated by MockGen. DO NOT EDIT.
// Source: go.mway.dev/chrono/clock (interfaces: Clock)
//
// Generated by this command:
//
//	mockgen -package clockmock -destination clockmock/clock.go go.mway.dev/chrono/clock Clock
//

// Package clockmock is a generated GoMock package.
package clockmock

import (
	reflect "reflect"
	time "time"

	clock "go.mway.dev/chrono/clock"
	gomock "go.uber.org/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
	isgomock struct{}
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockClock) After(d time.Duration) <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", d)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// After indicates an expected call of After.
func (mr *MockClockMockRecorder) After(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockClock)(nil).After), d)
}

// AfterFunc mocks base method.
func (m *MockClock) AfterFunc(d time.Duration, fn func()) *clock.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterFunc", d, fn)
	ret0, _ := ret[0].(*clock.Timer)
	return ret0
}

// AfterFunc indicates an expected call of AfterFunc.
func (mr *MockClockMockRecorder) AfterFunc(d, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFunc", reflect.TypeOf((*MockClock)(nil).AfterFunc), d, fn)
}

// Nanotime mocks base method.
func (m *MockClock) Nanotime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nanotime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Nanotime indicates an expected call of Nanotime.
func (mr *MockClockMockRecorder) Nanotime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nanotime", reflect.TypeOf((*MockClock)(nil).Nanotime))
}

// NewStopwatch mocks base method.
func (m *MockClock) NewStopwatch() *clock.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStopwatch")
	ret0, _ := ret[0].(*clock.Stopwatch)
	return ret0
}

// NewStopwatch indicates an expected call of NewStopwatch.
func (mr *MockClockMockRecorder) NewStopwatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStopwatch", reflect.TypeOf((*MockClock)(nil).NewStopwatch))
}

// NewTicker mocks base method.
func (m *MockClock) NewTicker(d time.Duration) *clock.Ticker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTicker", d)
	ret0, _ := ret[0].(*clock.Ticker)
	return ret0
}

// NewTicker indicates an expected call of NewTicker.
func (mr *MockClockMockRecorder) NewTicker(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTicker", reflect.TypeOf((*MockClock)(nil).NewTicker), d)
}

// NewTimer mocks base method.
func (m *MockClock) NewTimer(d time.Duration) *clock.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimer", d)
	ret0, _ := ret[0].(*clock.Timer)
	return ret0
}

// NewTimer indicates an expected call of NewTimer.
func (mr *MockClockMockRecorder) NewTimer(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimer", reflect.TypeOf((*MockClock)(nil).NewTimer), d)
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// Since mocks base method.
func (m *MockClock) Since(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Since", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since.
func (mr *MockClockMockRecorder) Since(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockClock)(nil).Since), t)
}

// SinceNanotime mocks base method.
func (m *MockClock) SinceNanotime(ns int64) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinceNanotime", ns)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SinceNanotime indicates an expected call of SinceNanotime.
func (mr *MockClockMockRecorder) SinceNanotime(ns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinceNanotime", reflect.TypeOf((*MockClock)(nil).SinceNanotime), ns)
}

// Sleep mocks base method.
func (m *MockClock) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockClockMockRecorder) Sleep(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockClock)(nil).Sleep), d)
}

// Tick mocks base method.
func (m *MockClock) Tick(arg0 time.Duration) <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick", arg0)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Tick indicates an expected call of Tick.
func (mr *MockClockMockRecorder) Tick(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockClock)(nil).Tick), arg0)
}
